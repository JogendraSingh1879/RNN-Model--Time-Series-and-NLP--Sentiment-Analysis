# -*- coding: utf-8 -*-
"""RNN Time Series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A4M4B31OIcN9N7Y28rj8a8-Xte9s2334
"""

# Importing the Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
from sklearn.preprocessing import MinMaxScaler
from statsmodels.datasets import get_rdataset

#step 1: Load the data

dataset = get_rdataset('AirPassengers', package = 'datasets').data
data = dataset['value'].values
print(data)

#Step 2 : Normalise the data
scaler = MinMaxScaler(feature_range = (0,1))
data = scaler.fit_transform(data.reshape(-1,1))

# Step 3: Create Sequences for RNN
def create_sequences(data, seq_length):
  x,y = [], []
  for i in range(len(data) - seq_length):
    x.append(data[i:i+seq_length])
    y.append(data[i+seq_length])
  return np.array(x), np.array(y)

# Getting the data
seq_length = 10
X, y = create_sequences(data, seq_length)

# Split the train and test data
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Step 4: Build the RNN model
model = Sequential([
    SimpleRNN(units = 32, input_shape = (seq_length,1)),
    Dense(units=1)
])

#compiling the model
model.compile(optimizer='adam', loss = 'mean_squared_error')

model.summary()

history = model.fit(X_train, y_train, epochs=150, batch_size=32, validation_split=0.1)

# Step 6: Making Predictions
y_pred = model.predict(X_test)

#Inverse Transform to original scale
y_test = scaler.inverse_transform(y_test)
y_pred = scaler.inverse_transform(y_pred)

# Step 7: Plot the results
plt.figure(figsize = (10,6))
plt.plot(range(len(data)), scaler.inverse_transform(data), label = 'Original Data')
plt.plot(range(train_size + seq_length, len(data)), y_pred, label = 'Predicted Data')
plt.xlabel('Time')
plt.ylabel('Passengers')
plt.legend()
plt.show()